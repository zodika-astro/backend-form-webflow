// payments/mercadoPago/router.return.js
'use strict';

/**
 * Mercado Pago Return Router
 * --------------------------
 * Purpose
 *  - Handle user redirections coming back from Mercado Pago (Checkout Pro back_urls).
 *  - Delegate the actual processing to the controller (no business logic here).
 *  - Keep responses non-cacheable and echo a stable correlation id header.
 *
 * Mount point (important):
 *  - This router is mounted under **/mercadoPago** (capital "P") in the main app:
 *      app.use('/mercadoPago', mpReturnRouter);
 *    Make sure any fallback URLs generated by services match this prefix.
 *
 * Routes
 *  - GET /mercadoPago/return
 *  - GET /mercadoPago/return/success
 *  - GET /mercadoPago/return/failure
 *  - GET /mercadoPago/return/pending
 *
 * Notes
 *  - The preferred flow is to send users directly to your frontend success page via
 *    `back_urls.success`. These routes exist as safe fallbacks.
 */

const express = require('express');
const router = express.Router();

const mpController = require('./controller');

// Echo a single, stable correlation id and avoid caching
router.use((req, res, next) => {
  const rid = req.requestId || req.get('x-request-id') || req.get('x-correlation-id');
  if (rid) {
    res.set('X-Request-Id', String(rid));
    res.set('X-Correlation-Id', String(rid));
  }
  res.set('Cache-Control', 'no-store');
  next();
});

// Main return endpoint (controller decides how to render/redirect)
router.get('/return', mpController.handleReturn);

// Optional aliases (commonly used by Mercado Pago back_urls)
router.get('/return/success', mpController.handleReturn);
router.get('/return/failure', mpController.handleReturn);
router.get('/return/pending', mpController.handleReturn);

module.exports = router;
